---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';

type Props = CollectionEntry<'blog'>['data'];

const { title, description, pubDate, updatedDate, heroImage } = Astro.props;
---

<html lang="en">
	<head>
		<BaseHead title={`${title} - Fausto CalviÃ±o`} description={description} />
		<style>	

			.hero-image {
				width: 100%;
			}
			.hero-image img {
				display: block;
				margin: 0 auto;
				border-radius: 12px;
				box-shadow: var(--box-shadow);
			}
			
			.title {
				margin-bottom: 1em;
				padding: 1em 0;
				text-align: center;
				line-height: 1;
			}
			.title h1 {
				margin: 0 0 0.5em 0;
			}
			.date {
				margin-bottom: 0.5em;
				color: rgb(var(--gray));
			}
			.last-updated-on {
				font-style: italic;
			}
			
		</style>
		
	</head>

	<body class="dark:bg-gray-800">
		<Header />
		<main class="max-w-[1300px] mt-10 mx-auto max-sm:w-[90%]"  >
			<article>
				<div class="hero-image">
					{heroImage && <img width={1020} height={510} src={heroImage} alt="" />}
				</div>
				<div class="prose main-text">
					<div class="title">
						<div class="date">
							<FormattedDate date={pubDate} />
							{
								updatedDate && (
									<div class="last-updated-on">
										Last updated on <FormattedDate date={updatedDate} />
									</div>
								)
							}
						</div>
						<h1 class="main-text">{title}</h1>
						<hr />
					</div>
					<slot  />
				</div>
			</article>
		</main>
		<Footer />
	</body>
</html>
<script>
	const preItems=document.querySelectorAll('pre');

	const toCopySvg=`<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-clipboard" width="35" height="35" viewBox="0 0 24 24" stroke-width="1" stroke="#ffffff" fill="none" stroke-linecap="round" stroke-linejoin="round">
		<path stroke="none" d="M0 0h24v24H0z" fill="none"/>
		<path d="M9 5h-2a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-12a2 2 0 0 0 -2 -2h-2" />
		<path d="M9 3m0 2a2 2 0 0 1 2 -2h2a2 2 0 0 1 2 2v0a2 2 0 0 1 -2 2h-2a2 2 0 0 1 -2 -2z" />
	</svg>`;

	const copiedSvg=`<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-clipboard-check" width="35" height="35" viewBox="0 0 24 24" stroke-width="1" stroke="#ffffff" fill="none" stroke-linecap="round" stroke-linejoin="round">
		<path stroke="none" d="M0 0h24v24H0z" fill="none"/>
		<path d="M9 5h-2a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-12a2 2 0 0 0 -2 -2h-2" />
		<path d="M9 3m0 2a2 2 0 0 1 2 -2h2a2 2 0 0 1 2 2v0a2 2 0 0 1 -2 2h-2a2 2 0 0 1 -2 -2z" />
		<path d="M9 14l2 2l4 -4" />
	</svg>`;

	preItems.forEach(item=>{
		item.classList.add('relative');
		item.classList.add('p-6');
		item.classList.add('bg-[#332449]');
		

		item.style.backgroundColor='';

		const buttonCopy=document.createElement('button');
		const codeToCopy=item.querySelector('code')?.innerText || 'no code';

		buttonCopy.innerHTML=toCopySvg;
		

		buttonCopy.classList.add('absolute');
		buttonCopy.classList.add('w-[35px]');
		buttonCopy.classList.add('h-[35px]');
		buttonCopy.classList.add('bg-[#231832]');
		buttonCopy.classList.add('right-[1.5rem]');
		buttonCopy.classList.add('top-[1.5rem]');

		buttonCopy.addEventListener('click',()=>{
			navigator.clipboard.writeText(codeToCopy)
			buttonCopy.innerHTML=copiedSvg
			setTimeout(() => {
				buttonCopy.innerHTML=toCopySvg
			}, 2000);

		})
		item.appendChild(buttonCopy)
	})
</script>